/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    implementation 'org.slf4j:slf4j-simple:1.7.30' // Use the latest version


    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

task runServer(type: JavaExec) {
    mainClass = 'com.insightum.FileServer' // Replace with your server's fully qualified name
    classpath = sourceSets.main.runtimeClasspath
    standardOutput = System.out
    errorOutput = System.err

    // Conditionally set arguments if they are provided
    if (project.hasProperty('appArgs')) {
        args project.appArgs.split(',')
    }

}

task runClient(type: JavaExec) {
    mainClass = 'com.insightum.FileClient' // Use the fully qualified main class name of your client
    classpath = sourceSets.main.runtimeClasspath

    // Ensure 'appArgs' property is provided for client arguments
    if (project.hasProperty('appArgs')) {
        args project.appArgs.split(',')
    } else {
        doFirst {
            throw new GradleException("Client requires arguments: <host> <port> <file-path>")
        }
    }
}





tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
